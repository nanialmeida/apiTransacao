# datasource
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:localhost:5432}/keycloak
spring.datasource.username=keycloak
spring.datasource.password=password

# jpa
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

# Mostrar Sql no terminal
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

server.error.include-message=always

#habilita fallback feign
feign.hystrix.enabled=true

#actuator
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.endpoint.health.status.order=fatal,down,out-of-service,unknown,up
management.endpoint.health.status.http-mapping.down=502
management.endpoint.health.status.http-mapping.fatal=502
management.endpoint.health.status.http-mapping.out-of-service=502
info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

#utiliza micrometer prometeus para pegar dados actuator
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true

management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:servi�o de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}
spring.profiles.active = dev


#configuracao oauth
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/Transacao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/Transacao/protocol/openid-connect/certs}

# Jaeger - Habilita ou n�o
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do servi�o
opentracing.jaeger.service-name=${spring.application.name}

# Jaeger - Endere�o para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabil�stico) e sua configura��o (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

## PROPRIEDADES DO KAFKA ##
# Endereço do Kafka
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}

spring.kafka.topic.transactions= transacoes

## PROPRIEDADES DO CONSUMIDOR ##
# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:minha-aplicacao}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}